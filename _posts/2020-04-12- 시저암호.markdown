---
layout: post
title: "프로그래머스 코딩테스트 Level 1 문제<br>시저암호"     
description: 
headline:
modified: 2020-04-12
category: Java
tags: [Programming]
imagefeature:
mathjax:
chart: true
comments: true
featured: true
---


## 1. 문제

어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다. 예를 들어 AB는 1만큼 밀면 BC가 되고, 3만큼 밀면 DE가 됩니다. z는 1만큼 밀면 a가 됩니다. 문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution을 완성해 보세요.

제한 조건
공백은 아무리 밀어도 공백입니다.
s는 알파벳 소문자, 대문자, 공백으로만 이루어져 있습니다.
s의 길이는 8000이하입니다.
n은 1 이상, 25이하인 자연수입니다.

입출력 예<br>
<table width="250" border="3" align="center">
    <tr>
        <td style="text-align:center">s</td>
        <td style="text-align:center">n</td>
        <td style="text-align:center">result</td>
    </tr>
    <tr>
        <td style="text-align:center">"AB"</td>
        <td style="text-align:center">1</td>
        <td style="text-align:center">"BC"</td>
    </tr>
    <tr>
        <td style="text-align:center">"z"</td>
        <td style="text-align:center">1</td>
        <td style="text-align:center">"a"</td>
    </tr>
    <tr>
        <td style="text-align:center">"a B z"</td>
        <td style="text-align:center">4</td>
        <td style="text-align:center">"e F d"</td>
    </tr>   

</table>


## 2. 내 코드 

```
import java.util.Arrays;

class Solution {
    public String solution(String s, int n) {
        char[] ch;
        ch = s.toCharArray();
        for(int i=0; i<ch.length; i++) {
            if(ch[i]==' ')
                continue;
            else{
                if(ch[i]>64 && ch[i]<91) {
                    for(int j=0; j<n; j++) {
                        ch[i]++;
                        if(ch[i]>90)
                            ch[i]=65;
                    }
                }
                else {
                    for(int j=0; j<n; j++) {
                        ch[i]++;
                        if(ch[i]>122)
                            ch[i]=97;
                    }
                }
                
                
                
                
            }
        }
            
        String answer = String.valueOf(ch);
        return answer;
    }
}
```
  
###### 공백은 넘어가고 반복문을 통해 계속 더해준다. 범위를 넘으면 다시 'a' 혹은 'A'로 돌아간다.     


  
## 3. 베스트 답안지

##### (나머지 기호 %를 이용한  답안지)

```
class Caesar {
    String caesar(String s, int n) {
        String result = "";
    n = n % 26;
    for (int i = 0; i < s.length(); i++) {
      char ch = s.charAt(i);
      if (Character.isLowerCase(ch)) {
        ch = (char) ((ch - 'a' + n) % 26 + 'a');
      } else if (Character.isUpperCase(ch)) {
        ch = (char) ((ch - 'A' + n) % 26 + 'A');
      }
      result += ch;
    }
        return result;
    }

    public static void main(String[] args) {
        Caesar c = new Caesar();
        System.out.println("s는 'a B z', n은 4인 경우: " + c.caesar("a B z", 4));
    }
}
```


## 4. 보완

#### 필요이상 반복문은 최소화하자!    

알파벳은 26개로 반복되므로 대/소문자로 경우의 수를 나누고 %26의 값을 'a' or 'A'에 더하여 준다.


▼▼▼   
```  
if (Character.isLowerCase(ch)) 
    ch = (char) ((ch - 'a' + n) % 26 + 'a');
else if (Character.isUpperCase(ch)) 
    ch = (char) ((ch - 'A' + n) % 26 + 'A'); 
``` 

(ch - 'a' + n)%26   
(n%26)만큼 더하기 위해 전체 문자(ch)에서 a만큼 빼준다 --> 0으로 초기화 + n % 26  
'a'+n = 답이기 때문에 다시 'a'를 더해준다.  
